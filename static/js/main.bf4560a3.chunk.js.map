{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","class","type","name","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","setState","sys","country","celsius","calCelsius","main","temp","weather","get_Weathericon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeid","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bf4560a3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = props =>{\r\n    return(\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards shadow \">\r\n                <br/>\r\n\r\n                    <h2>\r\n                    {props.city}\r\n                    </h2>\r\n                    <h5 className=\"py-4\">\r\n                   \r\n                   <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n                </h5>\r\n                {props.temp_celsius?(\r\n                    <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n                ):null}\r\n\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n\r\n                   \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nfunction minmaxTemp(min,max){\r\nif(min&&max){\r\n    return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    );\r\n}\r\n\r\n}\r\n\r\n\r\nexport default Weather;","\r\nimport React from 'react';\r\n\r\nimport\"./form.style.css\";\r\n\r\n\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error? error():null}</div>\r\n\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\"></div>\r\n                <div className=\"col-md-3\">\r\n                     <div class=\"custom-search\">\r\n                     <input type=\"text\" name=\"city\" class=\"custom-search-input\" placeholder=\"Enter your City Name\" />\r\n                    <button class=\"custom-search-botton\" type=\"submit\">Get Weather</button>  \r\n                </div>\r\n            </div>       \r\n            </div>\r\n            </form>   \r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n        \r\n        Please Enter City and Country Name First\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Form;","\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nimport \"weather-icons/css/weather-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Weather from \"./app_component/weather.component\";\r\nimport Form from \"./app_component/form.component\";\r\n\r\nconst API_key = \"5260021ade197ffb3aa3e632b002788a\";\r\n\r\nclass App extends React.Component{\r\nconstructor(){\r\nsuper();\r\nthis.state={\r\n  city:undefined,\r\n  country:undefined,\r\n  icon:undefined,\r\n  main:undefined,\r\n  celsius:undefined,\r\n  temp_max:undefined,\r\n  temp_min:undefined,  \r\n  description:\"\",\r\n  error:false\r\n \r\n};\r\n\r\n this.weatherIcon = {\r\n  Thunderstorm:\"wi-thunderstorm\",\r\n  Drizzle:\"wi-sleet\",\r\n  Rain:\"wi-storm-showers\",\r\n  Snow:\"wi-snow\",\r\n  Atmosphere:\"wi-fog\",\r\n  Clear:\"wi-day-sunny\",\r\n  Clouds:\"wi-day-fog\"\r\n };\r\n}\r\n\r\ncalCelsius(temp){\r\n  let cell=Math.floor(temp-273.15);\r\n  return cell;\r\n}\r\n\r\nget_Weathericon(icons,rangeid){\r\n// eslint-disable-next-line default-case\r\nswitch(true){\r\n  case rangeid >=200 && rangeid <= 232:\r\n    this.setState({icon:this.weatherIcon.Thunderstorm});\r\n    break;\r\n  case rangeid >=300 && rangeid <= 321:\r\n      this.setState({icon:this.weatherIcon.Drizzle});\r\n      break;\r\n  case rangeid >=500 && rangeid <= 531:\r\n    this.setState({icon:this.weatherIcon.Rain});\r\n    break;\r\n\r\n    case rangeid >=600 && rangeid <= 622:\r\n    this.setState({icon:this.weatherIcon.Snow});\r\n    break;\r\n\r\n    case rangeid >=701 && rangeid <= 781:\r\n    this.setState({icon:this.weatherIcon.Atmosphere});\r\n    break;\r\n    case rangeid ===800:\r\n    this.setState({icon:this.weatherIcon.Clear});\r\n    break;\r\n    case rangeid >=800 && rangeid <= 804:\r\n    this.setState({icon:this.weatherIcon.Clouds});\r\n    break;\r\n\r\n    default: this.setState({icon:this.weatherIcon.Clouds});\r\n  }\r\n\r\n}\r\n  \r\n\r\n\r\ngetWeather = async(e)=>{\r\n\r\n  e.preventDefault();\r\n\r\n  const city = e.target.elements.city.value;\r\n\r\n\r\nif(city){\r\n  const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_key}`);\r\n\r\n  const response = await api_call.json();\r\n\r\n  console.log(response);\r\n  \r\n  this.setState({\r\n    city:`${response.name},${response.sys.country}`, \r\n    country:response.sys.country,\r\n    celsius:this.calCelsius(response.main.temp),\r\n    temp_max:this.calCelsius(response.main.temp_max),\r\n    temp_min:this.calCelsius(response.main.temp_min),\r\n    description:response.weather[0].description,\r\n    error:false\r\n  });\r\n\r\n  this.get_Weathericon(this.weatherIcon,response.weather[0].id);\r\n\r\n}else{\r\n  this.setState({error:true});\r\n\r\n}\r\n\r\n  \r\n \r\n };\r\n\r\n  render(){\r\n    return(  \r\n       <div className=\"App\">\r\n         <Form loadweather={this.getWeather} error={this.state.error} />\r\n        <Weather \r\n        city={this.state.city}\r\n        country={this.state.country}\r\n        temp_celsius={this.state.celsius}\r\n        temp_max={this.state.temp_max}\r\n        temp_min={this.state.temp_min}\r\n        description={this.state.description}\r\n        weatherIcon={this.state.icon}\r\n\r\n        \r\n        />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}